<?php/* * Copyright (c) 2011, Valdirene da Cruz Neves Júnior <linkinsystem666@gmail.com> * All rights reserved. *//** * Classe de depuração das instruções SQL geradas pela classe DatabaseQuery * @author	Valdirene da Cruz Neves Júnior <linkinsystem666@gmail.com> * @version 1 *  */class Debug {	/**	 * Guarda as linhas de depuração	 * @var	array	 */	private static $debugs = array();		/**	 * Adiciona uma linha de depuração	 * @param	string	$string		valor da ser impresso	 * @return	void	 */	public static function add($string)	{		self::$debugs[] = $string;	}		/**	 * Adiciona uma linha de depuração de uma instrução SQL	 * @param	string	$sql		instrução SQL	 * @param	array	$values		valores da instrução SQL	 * @return	void	 */	public static function addSql($sql, $values = array())	{		self::$debugs[] = self::bindValues($sql, $values);	}		/**	 * Substitui as "?" (interrogações) pelos valores	 * @param	string	$sql		instrução SQL	 * @param	array	$values		valores da instruções SQL	 * @return	string				retorna a instrução com os valores substituidos	 */	private static function bindValues($sql, $values)	{		$parts = explode('?', trim($sql));		$sql = '';		for($i = 0; $i < count($parts); $i++)			$sql .= $parts[$i] . self::sanitize($values[$i]);		return $sql;	}		/**	 * Normaliza um valor de acordo com o SQL	 * @param	mixed	$value	o valor a ser normalizado	 * @return	mixed			retorna o valor normalizado	 */	private static function sanitize($value)	{		if(is_int($value))			return (int) $value + '0';		if(is_double($value) || is_float($value))			return (double) $value + '0';		if(is_bool($value))			return $value ? '1' : '0';		if(is_string($value) && $value != 'NULL')			return "`". $value ."`";		if($value == 'NULL')			return 'NULL';		return null;	}		/**	 * Imprime todas as linhas de depuração	 * @return	void	 */	public static function show()	{		if(is_debug && !defined('is_autodot'))		{			foreach(self::$debugs as $d)				echo $d . br . nl;		}	}}